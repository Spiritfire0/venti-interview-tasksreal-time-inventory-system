
## General information


## Here is the information on how to get it running on your computer. If you encounter any problems send me a dm on discord and I will do my best to solve it!
1. Install PostgreSQL (if not already installed)
Download from postgresql.org.
During installation, set a password for the postgres user.
After install, open pgAdmin or use the command line to create a database named yourdbname:


psql -U postgres
CREATE DATABASE yourdbname;


2. Set Up Environment Variables
Fill in the text in the .env file that is already set up as:
.env

3. Install Node.js Dependencies
Open a terminal in real-time-inventory-system and run:

npm install

4. Run Prisma Migrations
This will create the tables in your database.

For the Inventory Service:

npx prisma migrate dev --schema=Inventory-Service/schema.prisma


5. Start the Server
From real-time-inventory-system, run:

npm run dev


6. Open a New Terminal for Testing
Open a new Command Prompt or PowerShell window and navigate to where you have the real-time-inventory-system folder.




7. Test the REST API
Create a product:
curl -X POST http://localhost:3000/api/products -H "Content-Type: application/json" -d "{\"name\":\"Widget\"}"
Add stock:
curl -X POST http://localhost:3000/api/inventory/add -H "Content-Type: application/json" -d "{\"productId\":1,\"quantity\":10}"
Reserve stock:
curl -X POST http://localhost:3000/api/inventory/reserve -H "Content-Type: application/json" -d "{\"productId\":1,\"quantity\":5}"
Release reserved stock:
curl -X POST http://localhost:3000/api/inventory/release -H "Content-Type: application/json" -d "{\"productId\":1,\"quantity\":2}"
Get inventory status:
curl http://localhost:3000/api/inventory/1



8. Test the gRPC API
Install grpcurl and run:

Reserve stock via gRPC:
grpcurl -plaintext -d '{"productId":1,"quantity":5}' localhost:50051 inventory.InventoryService/ReserveStock
Add stock via gRPC:
grpcurl -plaintext -d '{"productId":1,"quantity":10}' localhost:50051 inventory.InventoryService/AddStock
Get inventory via gRPC:
grpcurl -plaintext -d '{"productId":1}' localhost:50051 inventory.InventoryService/GetInventory
## Project File Structure

real-time-inventory-system/
├── backend/
│   └── real-time-inventory-system/
│       ├── node_modules/
│       ├── src/
│       ├── tests/
│       ├── package.json
│       ├── tsconfig.json
│       ├── jest.config.js
│       └── README
├── Prisma/
│   ├── schema.prisma
│   └── ...
└── ...


Overview of your approach and architecture
My approach on this was a bit chaotic since I have never workt with any of this stuff before.
I started by doing a lot of reading on how everything worked and then I started to play around with the code.
I used a combination of copilot, chatgpt and google to figure out how to do things. This made the coding very smooth since I could spend most of my time understanding how it worked and how to improve it.
The architecture currently uses michroservices as you can se in the file structure. However it did not start this way and I changed it mid development since it would be a better fit for what was needed.
a michroservice architecture allows for better scalability and maintainability, especially for a real-time inventory system where different components can evolve independently (thanks both chatgtp and copilot for helping me understand this).



Any assumptions or limitations of your implementation

One huge improvement that I would have like to make is to implement more test and look over the archetecture and documentation a lot more.
Since it was a bit chaotic I did not have time to do this and I would have liked to spend more time on the documentation and the tests. Something my dad says a lot is that code is written onece and read nine hundread times.
This is something I would have liked to improve on since the code is not very readable and the documentation is not very good as far as I am consered currently. Normaly I tend to work a lot slower and consistant but I did kinda stress on this project due to my lack of experience and time.


What you would improve with more time¨

This was something I found super intresting to work with. I choose this particullat question since I had basically no experience with this before and I wanted to learn something new.
However I would probably prefer more frontend work since I have a bit more experience with it and am more comfotarable with it.
I will probably continue to play around with backend stuff however, and eventually I will be comfotrable with it!
